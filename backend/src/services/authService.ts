import { auth, adminAuth } from '../config/firebase';
import { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, UserCredential } from 'firebase/auth';
import { Request, Response, NextFunction } from 'express';

// User interface
export interface User {
  uid: string;
  email: string;
  displayName?: string;
  businesses?: string[]; // Array of business IDs the user has access to
}

// Mock users for development (only used when Admin SDK is not available)
export const mockUsers: Record<string, User> = {
  'test-user-123': {
    uid: 'test-user-123',
    email: 'test@example.com',
    displayName: 'Test User',
    businesses: []
  }
};

export const mockTokens: Record<string, string> = {
  'test-token-123': 'test-user-123'
};

// Register a new user
export async function registerUser(email: string, password: string): Promise<UserCredential> {
  try {
    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    console.log(`User registered successfully: ${userCredential.user.uid}`);
    return userCredential;
  } catch (error: any) {
    console.error('Error registering user:', error.message);
    throw error;
  }
}

// Login user
export async function loginUser(email: string, password: string): Promise<UserCredential> {
  try {
    const userCredential = await signInWithEmailAndPassword(auth, email, password);
    console.log(`User logged in successfully: ${userCredential.user.uid}`);
    return userCredential;
  } catch (error: any) {
    console.error('Error logging in user:', error.message);
    throw error;
  }
}

// Logout user
export async function logoutUser(): Promise<void> {
  try {
    await signOut(auth);
    console.log('User logged out successfully');
  } catch (error: any) {
    console.error('Error logging out user:', error.message);
    throw error;
  }
}

// Verify ID token (Admin SDK or mock)
export async function verifyIdToken(idToken: string): Promise<User | null> {
  try {
    // For testing - accept any token that starts with "firebase:" as a valid token
    if (idToken.startsWith('firebase:')) {
      const uid = idToken.split(':')[1];
      console.log(`Using test token for user: ${uid}`);
      return {
        uid,
        email: `${uid}@example.com`,
        displayName: `User ${uid}`,
        businesses: []
      };
    }
    
    if (adminAuth) {
      const decodedToken = await adminAuth.verifyIdToken(idToken);
      return {
        uid: decodedToken.uid,
        email: decodedToken.email || '',
        displayName: decodedToken.name,
        businesses: decodedToken.businesses as string[] || []
      };
    } else {
      // Mock implementation when Admin SDK is not available
      console.warn('Using mock token verification (Admin SDK not available)');
      
      // Check if it's a test token from our predefined list
      const uid = mockTokens[idToken];
      if (uid) {
        console.log(`Found mock token for user: ${uid}`);
        return mockUsers[uid] || null;
      }
      
      // For tokens generated by Firebase client SDK, we'll just extract the UID
      // This is not secure but works for development
      if (idToken && idToken.length > 20) {
        // Create a mock user based on the token
        const mockUid = `mock-${idToken.substring(0, 8)}`;
        console.log(`Creating mock user from token: ${mockUid}`);
        
        // Store the mock user
        mockUsers[mockUid] = {
          uid: mockUid,
          email: `${mockUid}@example.com`,
          displayName: `User ${mockUid}`,
          businesses: []
        };
        
        // Store the token mapping
        mockTokens[idToken] = mockUid;
        
        return mockUsers[mockUid];
      }
      
      return null;
    }
  } catch (error: any) {
    console.error('Error verifying ID token:', error.message);
    // Try mock verification as fallback
    const uid = mockTokens[idToken];
    if (uid) return mockUsers[uid] || null;
    return null;
  }
}

// Authentication middleware
export async function authMiddleware(req: Request, res: Response, next: NextFunction): Promise<void> {
  try {
    const authHeader = req.headers.authorization;
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      res.status(401).json({ error: 'Authentication required' });
      return;
    }
    
    const idToken = authHeader.split('Bearer ')[1];
    const user = await verifyIdToken(idToken);
    
    if (!user) {
      res.status(401).json({ error: 'Authentication required' });
      return;
    }
    
    // Attach user to request object
    (req as any).user = user;
    next();
  } catch (error) {
    // Continue without user on error
    console.error('Authentication error:', error);
    res.status(401).json({ error: 'Authentication required' });
  }
}

// Optional middleware - only verify token if present
export async function optionalAuthMiddleware(req: Request, res: Response, next: NextFunction): Promise<void> {
  try {
    const authHeader = req.headers.authorization;
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      // No token, continue without user
      next();
      return;
    }
    
    const idToken = authHeader.split('Bearer ')[1];
    const user = await verifyIdToken(idToken);
    
    if (user) {
      // Attach user to request object if token is valid
      (req as any).user = user;
    }
    
    next();
  } catch (error) {
    // Continue without user on error
    console.error('Optional authentication error:', error);
    next();
  }
}
